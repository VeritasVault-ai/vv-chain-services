# AI Guidelines for VeritasVault

This document provides guidelines for using AI tools (like GitHub Copilot, ChatGPT, Claude) when working with the VeritasVault codebase.

## Table of Contents

- [AI Guidelines for VeritasVault](#ai-guidelines-for-veritasvault)
  - [Table of Contents](#table-of-contents)
  - [General AI Usage Guidelines](#general-ai-usage-guidelines)
  - [Commit Message Guidelines](#commit-message-guidelines)
    - [Conventional Commits Structure](#conventional-commits-structure)
    - [Types with Emojis](#types-with-emojis)
    - [Scopes](#scopes)
    - [Examples](#examples)
    - [Commit Message Automation](#commit-message-automation)
  - [Code Generation Guidelines](#code-generation-guidelines)
  - [Documentation Generation Guidelines](#documentation-generation-guidelines)
  - [Security Considerations](#security-considerations)

## General AI Usage Guidelines

1. **Review All AI-Generated Content**: Always review AI-generated code, documentation, and other content before committing or using it.
2. **Understand the Code**: Don't commit code you don't understand, even if it was generated by AI.
3. **Credit AI Tools**: When appropriate, mention in comments or documentation when significant portions were AI-assisted.
4. **Sensitive Information**: Never share API keys, passwords, or other sensitive information with AI tools.
5. **Test AI-Generated Code**: Always test AI-generated code thoroughly before committing.

## Commit Message Guidelines

### Conventional Commits Structure

All commit messages should follow the [Conventional Commits](https://www.conventionalcommits.org/) specification:

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### Types with Emojis

Use these types with their corresponding emojis:

| Type     | Emoji | Description                                                                        |
| -------- | ----- | ---------------------------------------------------------------------------------- |
| feat     | ‚ú®     | A new feature                                                                      |
| fix      | üêõ     | A bug fix                                                                          |
| docs     | üìö     | Documentation only changes                                                         |
| style    | üíé     | Changes that do not affect the meaning of the code (white-space, formatting, etc.) |
| refactor | ‚ôªÔ∏è     | A code change that neither fixes a bug nor adds a feature                          |
| perf     | ‚ö°Ô∏è     | A code change that improves performance                                            |
| test     | üß™     | Adding missing tests or correcting existing tests                                  |
| build    | üõ†Ô∏è     | Changes that affect the build system or external dependencies                      |
| ci       | üë∑     | Changes to our CI configuration files and scripts                                  |
| chore    | üßπ     | Other changes that don't modify src or test files                                  |
| revert   | ‚è™     | Reverts a previous commit                                                          |

### Scopes

Common scopes for the VeritasVault project:

- **core**: Core functionality
- **risk**: Risk calculation related changes
- **ml**: Machine learning related changes
- **api**: API related changes
- **func**: Azure Functions related changes
- **infra**: Infrastructure related changes
- **ui**: User interface related changes
- **db**: Database related changes
- **auth**: Authentication related changes
- **deps**: Dependency updates

### Examples

```
‚ú® feat(risk): add new risk calculation algorithm

Implemented the XYZ algorithm for more accurate risk assessment.
The new algorithm improves accuracy by 15% based on our test dataset.

Closes #123
```

```
üêõ fix(api): resolve null reference in risk endpoint

Added null checks to prevent NullReferenceException when optional 
parameters are not provided.

Fixes #456
```

```
üìö docs(ml): update ML engine documentation

Updated the documentation to reflect the new hyperparameter tuning process
and added examples of how to use the new configuration options.
```

```
‚ôªÔ∏è refactor(core): simplify event processing pipeline

Reduced complexity by combining duplicate processing steps and
improving the overall flow of events through the system.
```

### Commit Message Automation

Consider using tools to help enforce conventional commits:

- **commitlint**: Add to your CI pipeline to validate commit messages
- **commitizen**: Use to help format commit messages correctly
- **husky**: Set up git hooks to validate commits locally

## Code Generation Guidelines

When using AI to generate code for VeritasVault:

1. **Follow Project Patterns**: Ensure AI-generated code follows existing patterns and conventions in the codebase.
2. **Break Down Complex Tasks**: For complex features, break them down into smaller parts for the AI to handle.
3. **Provide Context**: Give the AI sufficient context about your codebase and requirements.
4. **Iterative Refinement**: Use multiple prompts to refine the generated code.
5. **Check for Edge Cases**: AI may miss edge cases, so review code carefully for these.

## Documentation Generation Guidelines

When using AI to generate documentation:

1. **Maintain Voice and Tone**: Ensure AI-generated documentation maintains a consistent voice and tone.
2. **Technical Accuracy**: Verify all technical details in AI-generated documentation.
3. **Update Diagrams**: If documentation includes references to diagrams, ensure they are also updated.
4. **Cross-Reference**: Ensure cross-references to other documentation are correct.
5. **Audience Appropriate**: Ensure the documentation is appropriate for the intended audience.

## Security Considerations

1. **Code Review**: All AI-generated code must go through the same review process as human-written code.
2. **Security Patterns**: Verify AI-generated code follows security best practices.
3. **Dependency Insertion**: Be cautious of AI suggesting new dependencies that may introduce security risks.
4. **Sensitive Logic**: Be especially careful when using AI for security-critical components.
5. **Test Coverage**: Ensure AI-generated code has appropriate test coverage.

---

These guidelines are meant to help you use AI tools effectively and responsibly when working with the VeritasVault codebase. They are not meant to be restrictive but to ensure consistency, quality, and security.